// automatically generated by the FlatBuffers compiler, do not modify

package metrics

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MetricValue struct {
	_tab flatbuffers.Table
}

func GetRootAsMetricValue(buf []byte, offset flatbuffers.UOffsetT) *MetricValue {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MetricValue{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MetricValue) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MetricValue) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MetricValue) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MetricValue) Timestamp() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MetricValue) MutateTimestamp(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *MetricValue) ValueType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MetricValue) MutateValueType(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *MetricValue) Value(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *MetricValue) Generation() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MetricValue) MutateGeneration(n int16) bool {
	return rcv._tab.MutateInt16Slot(12, n)
}

func (rcv *MetricValue) StreamTags(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *MetricValue) StreamTagsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func MetricValueStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MetricValueAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func MetricValueAddTimestamp(builder *flatbuffers.Builder, timestamp uint64) {
	builder.PrependUint64Slot(1, timestamp, 0)
}
func MetricValueAddValueType(builder *flatbuffers.Builder, valueType byte) {
	builder.PrependByteSlot(2, valueType, 0)
}
func MetricValueAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(value), 0)
}
func MetricValueAddGeneration(builder *flatbuffers.Builder, generation int16) {
	builder.PrependInt16Slot(4, generation, 0)
}
func MetricValueAddStreamTags(builder *flatbuffers.Builder, streamTags flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(streamTags), 0)
}
func MetricValueStartStreamTagsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MetricValueEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
